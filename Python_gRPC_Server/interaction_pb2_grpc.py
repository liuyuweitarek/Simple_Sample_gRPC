# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import interaction_pb2 as interaction__pb2


class InteractStub(object):
    """The interact service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SimpleConnect = channel.unary_unary(
                '/interaction.Interact/SimpleConnect',
                request_serializer=interaction__pb2.ConnectRequest.SerializeToString,
                response_deserializer=interaction__pb2.ConnectReply.FromString,
                )
        self.SimpleSend = channel.unary_unary(
                '/interaction.Interact/SimpleSend',
                request_serializer=interaction__pb2.Input.SerializeToString,
                response_deserializer=interaction__pb2.Output.FromString,
                )


class InteractServicer(object):
    """The interact service definition.
    """

    def SimpleConnect(self, request, context):
        """Sends connection confirm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimpleSend(self, request, context):
        """Sends information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InteractServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SimpleConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.SimpleConnect,
                    request_deserializer=interaction__pb2.ConnectRequest.FromString,
                    response_serializer=interaction__pb2.ConnectReply.SerializeToString,
            ),
            'SimpleSend': grpc.unary_unary_rpc_method_handler(
                    servicer.SimpleSend,
                    request_deserializer=interaction__pb2.Input.FromString,
                    response_serializer=interaction__pb2.Output.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'interaction.Interact', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Interact(object):
    """The interact service definition.
    """

    @staticmethod
    def SimpleConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interaction.Interact/SimpleConnect',
            interaction__pb2.ConnectRequest.SerializeToString,
            interaction__pb2.ConnectReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SimpleSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/interaction.Interact/SimpleSend',
            interaction__pb2.Input.SerializeToString,
            interaction__pb2.Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
